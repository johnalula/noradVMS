<?php

/**
 * BaseTaskOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $task_id
 * @property string $token_id
 * @property integer $category_id
 * @property integer $clss
 * @property integer $unit_id
 * @property float $actual_quantity
 * @property float $remaining
 * @property float $unit_price
 * @property boolean $vat
 * @property integer $currency_id
 * @property float $amount
 * @property integer $effective_date
 * @property integer $status
 * @property string $description
 * @property Task $Task
 * @property Category $Category
 * @property Unit $Unit
 * @property Currency $Currency
 * @property Doctrine_Collection $itemTaskOrders
 * 
 * @package    noradVMS
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTaskOrder extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('task_order');
        $this->hasColumn('task_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('token_id', 'string', 100, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('clss', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('unit_id', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('actual_quantity', 'float', null, array(
             'type' => 'float',
             'notnull' => true,
             ));
        $this->hasColumn('remaining', 'float', null, array(
             'type' => 'float',
             'default' => 0,
             ));
        $this->hasColumn('unit_price', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('vat', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('currency_id', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('amount', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('effective_date', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Task', array(
             'local' => 'task_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Unit', array(
             'local' => 'unit_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Currency', array(
             'local' => 'currency_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Item as itemTaskOrders', array(
             'local' => 'id',
             'foreign' => 'task_order_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}