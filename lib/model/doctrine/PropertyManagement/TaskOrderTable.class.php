<?php

/**
 * TaskOrderTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TaskOrderTable extends PluginTaskOrderTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object TaskOrderTable
     */
	 
   
	
	public static function processCreate ($task_id, $token_id, $cat_id, $class_id, $unit_id, $quantity, $unit_price, $vat, $currency_id, $amount, $date, $status, $description )
	{
		try{
			
			if(is_null($task_id) && is_null($token_id) )
				return false;
    
				$_nw = new TaskOrder ();  
				$_nw->task_id = $task_id;
				$_nw->token_id = $token_id; 
				$_nw->category_id = $cat_id;
				$_nw->clss = $class_id;
				$_nw->unit_id = $unit_id;
				$_nw->actual_quantity = $quantity;
				$_nw->unit_price = $unit_price;
				$_nw->vat = $vat;
				$_nw->currency_id = $currency_id;
				$_nw->amount = $amount;
				$_nw->effective_date = $date; 
				$_nw->status = $status; 
				$_nw->description = $description; 
				$_nw->save(); 
				$_nw_id = $_nw->id;
				$token = $_nw->token_id;
				
				$order = self::processObject($_nw_id, $token);
				 
				//if( ! $order )	return false; 
				
				$flag = self::processCreateItems( $order ); 
				//$flag = VehicleTable::processCreate ( $order );
				
				if( !$flag ) {
					$_nw->delete( ); 
					return false;
				}
					return true;
			
		} catch ( Exception $e ) {
            return false; 
        }
	}
	
	public static function processCreateItems ( $order ) 
	{ 
	 
		//if( ! $order )
			//return false; 
			
		//$clss = $order->classID; 
		
		//switch ( $clss ) {
			
			//case PropertyClassCore::$DOCUMENT : return DocumentTable::createItems($order); 
			//	break; 
			//case PropertyClassCore::$SPAREPART : return SparepartTable::createItems($order); 
			//	break;
		 return  VehicleTable::processCreate ( $order ); 
			//	break;
			//case PropertyClassCore::$ITEM : return ItemTable::createItems($order); 
			//	break;
			//default:
				//return false; 
		//}
		//return true; 
	}
	
	public static function processObject($_id, $token_id ) 
	{
		$q= Doctrine_Query::create()
			->select("tsko.*, cat.name as categoryName, unt.name as unitName, crr.name as currencyName, tsk.status_id as tskStatus, tsko.clss as classID ")
			->from("TaskOrder tsko") 
			->innerJoin("tsko.Task tsk")
			->innerJoin("tsko.Category cat on tsko.category_id = cat.id")
			->innerJoin("tsko.Unit unt on tsko.unit_id = unt.id")
			->innerJoin("tsko.Currency crr on tsko.currency_id = crr.id")
			//->leftJoin("grp.groupModulePermissions per on per.group_id = grp.id") 
			->where('tsko.id = ? AND tsko.token_id = ?', array($_id, $token_id))
			->fetchOne ( );
			
		return ( ! $q ? null : $q ); 
	}
	
	public static function processSelection ( $task_id, $token_id, $status=null, $keyword=null, $offset=0, $limit=10) 
	{
		$q= Doctrine_Query::create()
			->select("tsko.*, cat.name as categoryName, unt.name as unitName, crr.name as currencyName, tsk.status_id as tskStatus ")
			->from("TaskOrder tsko") 
			->innerJoin("tsko.Task tsk")
			->innerJoin("tsko.Category cat on tsko.category_id = cat.id")
			->innerJoin("tsko.Unit unt on tsko.unit_id = unt.id")
			->innerJoin("tsko.Currency crr on tsko.currency_id = crr.id")
			//->leftJoin("grp.groupModulePermissions per on per.group_id = grp.id")
			->offset($offset)
			->limit($limit)
			->where('tsko.task_id = ? AND tsko.token_id = ?', array($task_id, $token_id))
			->execute( ); 

	return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function getInstance()
	{
		return Doctrine_Core::getTable('TaskOrder');
	}
}
