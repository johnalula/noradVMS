<?php

/**
 * VehicleTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class VehicleTable extends PluginVehicleTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object VehicleTable
     */
     
   public static function processCreate ( $order ) 
   {	
		if( ! $order )
			return false;
			
		$clss = $order->classID; 
		if( $clss != PropertyClassCore::$VEHICLE )
		return false; 

		$count = intval($order->actual_quantity);
		
		try{
			$i = 1;
			for( $i = 1; $i <= $count; $i ++ ) 
			{
				$_nw = new Vehicle ( ); 
				$_nw->task_id = $order->task_id; 
				$_nw->token_id = $order->token_id; 
				$_nw->task_order_id = $order->id; 
				$_nw->status = $order->status; 
				$_nw->effective_date = $order->effective_date; 
				$_nw->clss = PropertyClassCore::$VEHICLE; 
				$_nw->category_id = $order->category_id;  
				$_nw->quantity = 1;  
				$_nw->is_present = true; 
				$_nw->save();
				}
			 
			return true; 
		} catch ( Exception $e ) {
			return false; 
		}
	}
	
	public static function processSelection ($is_assigned=null, $status=null, $keyword=null, $offset=0, $limit=10) 
	{
		$q= Doctrine_Query::create()
			->select("vh.*, cat.name as categoryName, tsk.status_id as tskStatus, vh.plate_code as plateCode, vh.plate_number as plateNo, (vh.is_assigned = 1 ) AS assignedVehicle ")
			->from("Vehicle vh") 
			->innerJoin("vh.Task tsk")
			->innerJoin("vh.TaskOrder tsko")
			->innerJoin("vh.assignedVehicle asvh")
			->innerJoin("vh.Category cat on vh.category_id = cat.id")
			//->innerJoin("tsko.Unit unt on tsko.unit_id = unt.id")
			//->innerJoin("tsko.Currency crr on tsko.currency_id = crr.id") 
			->offset($offset)
			->limit($limit)
			->where('vh.clss = ?', PropertyClassCore::$VEHICLE);
			if(!is_null($is_assigned))
			$q = $q->addWhere('vh.is_assigned = ?', $is_assigned);
			//if(!is_null($is_departed))
			//$q = $q->addWhere('asvh.departure_status = ?', $is_departed);
			
			$q = $q->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function processObject ($_id, $token_id ) 
	{
		$q= Doctrine_Query::create()
			->select("vh.*, vh.plate_code as plateCode, vh.plate_number as plateNo, vh.is_assigned as isAssigned, vh.vehicle_color as vehicleColor, vh.serial_no as serialNo, vh.pin_num as pinNo, vh.seating_capacity as seatCapacity, vh.vehicle_type_id as vehicleType, vh.fuel_type_id as fuelType, vh.vehicle_model as modelNo, vh.vehicle_make as vehicleMake, vh.engine_number as engineNo, vh.chesis_number as chesisNo, vh.vehicle_weight as vehicleWeight,  
			asso.participant_id as partID, asso.task_id as taskID, dr.employee_id as empID, prt.name as firstName, prt.father_name as fatherName, prt.grand_father_name as grandFatherName, tsk.reference_no as refNo, tsk.start_date as startDate, tsk.effective_date as effectiveDate")
			->from("Vehicle vh") 
			->innerJoin("vh.assignmentTaskOrderVehicles asso")
			->innerJoin("asso.Driver dr")
			->innerJoin("dr.Participant prt on prt.id = dr.employee_id")
			//->innerJoin("vh.assignedVehicle ass")
			//->innerJoin("ass.Driver dr")
			//->innerJoin("dr.Participant emp on dr.employee_id = emp.id")
			//->innerJoin("emp.Participant prt on emp.participant_id = emp.id")
			->innerJoin("vh.Task tsk")
			->where('vh.id = ? AND vh.token_id = ?', array($_id, $token_id))
			->fetchOne ( );
			
		return ( ! $q ? false : $q ); 
	}
	
	public static function processVehicleAssignment( $order )
	{
		if( ! $order )
			return false;
			
	//	try{
			
			$vehicle_id = $order->vehicle_id;
			$token = $order->vehicleTokenID;
			$part_id = $order->participant_id;
			$task_id =  $order->task_id;
			$token_id =  $order->token_id;
			$role =  ParticipantCore::$DRIVER;
			
			$drivers = DriverTable::processObject ($part_id );
			if(!$drivers->isAssigned)
				$drivers->assignDriver();
			
			$vehicle = self::processObject ($vehicle_id, $token );
			if(!$vehicle->isAssigned)
				$vehicle->assignVehicle();
				
			$_nw = new AssignedVehicle ( ); 
			$_nw->task_id = $order->task_id; 
			$_nw->token_id = $order->token_id; 
			$_nw->assignment_order_id = $order->id;  
			$_nw->effective_date = $order->effective_date; 
			$_nw->vehicle_id = $order->vehicle_id; 
			$_nw->participant_id = $order->participant_id;  
			$_nw->reasigned_status = false; 
			$_nw->save();

			$flag = AssignmentTaskTable::processCreateTaskParticipant ( $task_id, $token_id, $part_id, $role, null);
			
				
			 
		//	return true; 
		//} catch ( Exception $e ) {
		//	return false; 
		//}
	}
	
	public static function getInstance()
	{
	  return Doctrine_Core::getTable('Vehicle');
	}
}
