<?php

/**
 * EmployeeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EmployeeTable extends PluginEmployeeTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object EmployeeTable
     */
   public static $PRESIDENT = 1;
   public static $DIRECTOR = 2;
   public static $DEAN = 3;
   public static $HEAD = 4;
   public static $ACADEMIC_STAFF = 5;
   public static $ADMINISTRATIVE_STAFF = 6;
   public static $DRIVER = 7;
   public static $MECHANIC = 8;
   public static $OTHER = 9;
   
	public static function getEmployeeObject($part_id, $token_id)
	{
		$q= Doctrine_Query::create()
			->select("prt.* ")
			->from("Participant prt") // 
			->where("prt.id = ? AND prt.token_id = ?",array($part_id, $token_id) )
			->fetchOne(); 
		return (! $q ? null : $q ); 	
		
	}

	public static function getEmployeeList($status=null, $keyword=null, $exclusion=null , $parent=null, $offset=0, $limit=10, $dept=null ) 
	{
		$q= Doctrine_Query::create()
			->select("prt.* ")
			->from("Participant prt") 
			->leftJoin("prt.Participant dept on dept.id = prt.dept_id")
			->offset($offset)
			->limit($limit)
			->where("prt.parent_id IS NOT NULL AND prt.participant_type_id = ?", ParticipantCore::$EMPLOYEE ); 
		$q= self::addStatusQuery($q, $status );
		$q= self::addKeywordQuery($q, $keyword );
		$q= self::addExclusionQuery($q, $exclusion );
		$q= self::addUmbrellaQuery($q, $parent );
		if(! is_null($dept))
			$q=$q->andWhere("dept.id=?", $dept);
		$q= $q->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}

	public static function getCandidateParents()
	{
		
	}

	public static function addEmployee($parent_id, $employment_type, $title, $name, $father_name, $grand_father_name, $id_no, $job_title, $birth_date, $birth_place, $status, $vat_number, $description, $street_no, $house_no, $pobox_no, $mobile_no, $phone_no, $fax_no, $email, $website)
	{
		$full_name= trim($name)." ".trim($father_name)." ".trim($grand_father_name);
		$token = trim($name).trim($id_no).rand('11111', '99999');
		$_nw = new Employee(); //
		$_nw->token_id = MD5($token);
		$_nw->participant_type_id = ParticipantTable::$EMPLOYEE;
		$_nw->name = trim($name);
		$_nw->father_name = trim($father_name);
		$_nw->grand_father_name = trim($grand_father_name);
		$_nw->job_title = trim($job_title);
		$_nw->employment_type = $employment_type;
		$_nw->title = $title;
		$_nw->birth_date = $birth_date;  
		$_nw->status_id = $status; 
		$_nw->vat_number = trim($vat_number);
		$_nw->description = trim($description);
		$_nw->parent_id= $parent_id;
		$_nw->save(); 
		$_nw_id = $_nw->id;
			$contact = ParticipantContactTable::addContact($_nw_id, $street_no, $house_no, $pobox_no, $mobile_no, $phone_no, $fax_no, $email, $website);
		return true; 
	 
	}

	public static function updateEmployee($_id, $token_id, $parent_id, $employment_type, $title, $name, $father_name, $grand_father_name, $id_no, $job_title, $birth_date, $status, $vat_number, $description, $street_no, $house_no, $pobox_no, $mobile_no, $phone_no, $fax_no, $email, $website)
	{
		$q = Doctrine_Query::create( )
			->update('Employee prt')
			->set('prt.participant_type_id', '?', ParticipantTable::$EMPLOYEE)
			->set('prt.name', '?', trim($name))
			->set('prt.father_name', '?', trim($father_name))
			->set('prt.grand_father_name', '?', trim($grand_father_name))
			->set('prt.job_title', '?', trim($job_title))
			->set('prt.employment_type', '?', $employment_type )
			->set('prt.id_no', '?', trim($id_no))
			->set('prt.title', '?', trim($title))
			->set('prt.birth_date', '?', trim($birth_date))
			->set('prt.status_id', '?', trim($status)) 
			->set('prt.vat_number', '?', trim($vat_number)) 
			->set('prt.description', '?', trim($description)) 
			->set('prt.parent_id', '?', $parent_id) 
			->where('prt.id = ? AND prt.token_id = ?', array($_id, $token_id))
			->execute();	
			
			$contact = ParticipantContactTable::updateContact($_id, $street_no, $house_no, $pobox_no, $mobile_no, $phone_no, $fax_no, $email, $website);
			
		return ( $q > 0 );   
	}

   public static function deleteEmployee()
   {
		$q = Doctrine_Query::create()
			->select("prt.*, to.id as TOID")
			->from("Participant prt")
			->innerJoin("prt.taskParticipantParticipants to")
			->offset(0)
			->limit(4)
			->where("prt.id = ? ",  $id )
			->execute(); 
		if( count($q) > 0 )
			return false; 			

		$q2 = Doctrine_Query::create()
				->delete("*")
				->from("Participant prt")
				->where("prt.id=?", $id )
				->execute( );
		return ( $q2 > 0  ) ;
		//calculate relation => deletability 
	}
    
	public static function addKeywordQuery($q, $keyword)
	{
		if( is_null($keyword))
			return $q; 
		$q= $q->andWhere("prt.name LIKE ?", $keyword); 
		return $q; 
	}

	public static function addStatusQuery($q, $status)
	{
		if( is_null($status))
			return $q; 
		$q= $q->andWhere("prt.status_id=?",  $status); 
		return $q; 
	}

	public static function addExclusionQuery($q, $exclusion)
	{
		if(! is_array($exclusion) )
			return $q; 
		if( count($exclusion) <= 0 )
			return $q; 
		$q= $q->andWhereNotIn("prt.id",  $exclusion); 
		return $q; 
	}

	public static function addParentQuery($q, $parent_id)
	{
		if( is_null($parent_id))
			return $q; 
		$q = $q->andWhere("prt.parent_id=?",  $parent_id); 
		return $q; 
	}

	public static function getStatusList()
	{
		$q = Doctrine_Query::create()
			->select("DISTINCT(to.type_id) AS statuses")
			->from("Participant to")
			->where("to.id IS NOT NULL"); 
			
		$q = $q->andWhereIn("to.participant_type_id", ParticipantCore::$EMPLOYEE)
		  	->execute( ); 
		$st = array(); 
		$count= count($q);
		if ($count <= 0 )
			return $st; 
		foreach($q as $prt )
			$st[] = $prt->statuses; 
		return $st; 
	}

	public static function getTypeList()
	{}


	public static function getInstance()
	{
	return Doctrine_Core::getTable('Employee');
	}
}
