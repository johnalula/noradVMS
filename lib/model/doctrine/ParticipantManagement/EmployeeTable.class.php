<?php

/**
 * EmployeeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EmployeeTable extends PluginEmployeeTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object EmployeeTable
     */
   public static $PRESIDENT = 1;
   public static $VICE_PRESIDENT = 2;
   public static $DIRECTOR = 3;
   public static $DEAN = 4;
   public static $HEAD = 5;
   public static $DRIVER = 6;
   public static $MECHANIC = 7;
   public static $ACADEMIC_STAFF = 8;
   public static $ADMINISTRATIVE_STAFF = 9;
   public static $TEAM_LEADER = 10;
   public static $OTHER = 11;
   
   public static $ALL_EMPLOYMENT_TYPES = array ( 1 => "President", 2 => "Vice President" , 3 => "Director" , 4 => "Dean",  5 => "Head", 6 => "Driver", 7 => "Mechanic" , 8 => "Academic ", 9 => "Administrative",10 => "Team Leader", 11 => "Other" );
   
   public static $EMP_PARTICIPANTS = array ( 1 => "Office", 2 => "College" , 3 => "Institution" , 4 => "Center",  5 => "Department", 7 => "Project");
   
   public static function fetchEmployeementTypeID ( $value ) 
	{
		try {
				foreach( self::$ALL_EMPLOYMENT_TYPES as $key=> $role ){
					if( strcmp($type, $value) == 0 )
					  return $key; 
			}			
			 return true; 
	  } catch ( Exception $e ) {
			return false; 
	  }
	}
	
	public static function fetchEmployeementTypeValue  ( $id )
	{
		try{
				foreach( self::$ALL_EMPLOYMENT_TYPES as $key=> $type ){
				  if( $key == $id )
						return $type; 
			}
			 return true; 
	  } catch ( Exception $e ) {
			 return false; 
	  }
	}

	public static function processCreate($parent_id, $employment_type, $title, $name, $father_name, $grand_father_name, $id_no, $job_title, $birth_date, $status, $vat_number, $project_no, $description, $pobox_no, $mobile_no, $phone_no, $fax_no, $email, $website)
	{
		try
		{
			if(!$parent_id)
				return false;
				
			if(!$name)
				return false;
			
			$full_name = $name.'-'.$father_name.'-'.$grand_father_name;
			$token = trim($name).trim($id_no).rand('11111', '99999');
			$_nw = new Employee(); //
			$_nw->token_id = MD5($token);
			$_nw->participant_type = ParticipantCore::$EMPLOYEE;
			$_nw->name = trim($name);
			$_nw->father_name = trim($father_name);
			$_nw->grand_father_name = trim($grand_father_name);
			$_nw->full_name = $full_name;
			$_nw->job_title = trim($job_title);
			$_nw->employment_type_id = $employment_type;
			$_nw->title = $title;
			$_nw->birth_date = $birth_date;  
			$_nw->status_id = $status; 
			$_nw->id_no = trim($id_no);
			$_nw->vat_number = trim($vat_number);
			$_nw->project_no = trim($project_no);
			$_nw->description = trim($description);
			$_nw->parent_id= $parent_id;
			$_nw->save(); 
			$_nw_id = $_nw->id;
				
				$contact = ParticipantContactTable::processCreate($_nw_id, null,null, $pobox_no, $mobile_no, $phone_no, $fax_no, $email, $website);
				
			return true; 
		} catch ( Exception $e ) {			
			return false; 
		}	 
	 
	}

	public static function processUpdate($_id, $token_id, $parent_id, $employment_type, $title, $name, $father_name, $grand_father_name, $id_no, $job_title, $birth_date, $status, $vat_number, $project_no, $description, $pobox_no, $mobile_no, $phone_no, $fax_no, $email, $website)
	{
		
			if(!$parent_id)
				return false;
				
			if(!$name)
				return false;
				
			$full_name= $name.'-'.$father_name.'-'.$grand_father_name;
			$q = Doctrine_Query::create( )
				->update('Employee prt')
				->set('prt.participant_type', '?', ParticipantTable::$EMPLOYEE)
				->set('prt.name', '?', trim($name))
				->set('prt.father_name', '?', trim($father_name))
				->set('prt.grand_father_name', '?', trim($grand_father_name))
				->set('prt.full_name', '?', trim($full_name))
				->set('prt.job_title', '?', trim($job_title))
				->set('prt.employment_type', '?', $employment_type )
				->set('prt.id_no', '?', trim($id_no))
				->set('prt.title', '?', trim($title))
				->set('prt.birth_date', '?', trim($birth_date))
				->set('prt.status_id', '?', trim($status)) 
				->set('prt.id_no', '?', trim($id_no)) 
				->set('prt.vat_number', '?', trim($vat_number)) 
				->set('prt.project_no', '?', trim($project_no)) 
				->set('prt.description', '?', trim($description)) 
				->set('prt.parent_id', '?', $parent_id) 
				->where('prt.id = ? AND prt.token_id = ?', array($_id, $token_id))
				->execute();	
				
				$contact = ParticipantContactTable::updateContact($_id, null, null, $pobox_no, $mobile_no, $phone_no, $fax_no, $email, $website);
			
		return ( $q > 0 );   
	}

   public static function processDelete()
   {
		$q = Doctrine_Query::create()
			->select("prt.*, to.id as TOID")
			->from("Participant prt")
			->innerJoin("prt.taskParticipantParticipants to")
			->offset(0)
			->limit(4)
			->where("prt.id = ? ",  $id )
			->execute(); 
		if( count($q) > 0 )
			return false; 			

		$q2 = Doctrine_Query::create()
				->delete("*")
				->from("Participant prt")
				->where("prt.id=?", $id )
				->execute( );
		return ( $q2 > 0  ) ;
		//calculate relation => deletability 
	}
    
	public static function processObject($_id, $token_id)
	{
		$q = Doctrine_Query::create()
			->select("prt.*, prt.name as firstName, prt.father_name as fatherName, prt.grand_father_name as grandFatherName, prt.full_name as fullName, prt.participant_leader_id as leaderID, prt.project_no as projectNo, prt.vat_number as vatNo, prt.status_id as partyStatus, prt.campus_id, campusID, prt.alias as partyAlias, prt.parent_id as parentID, prt.token_id as tokenID, prt.participant_type as typeID, prtcnt.mobile_number as mobileNo, prtcnt.phone_number as phoneNo, prtcnt.pobox as pobox, prtcnt.email as email, prtcnt.website as website, cmps.name as campusName")
				->from("Employee prt") 
				->leftJoin("prt.Participant pt") 
				->leftJoin("prt.participantContacts prtcnt")
				->leftJoin("prt.Campus cmps")
				->where("prt.id = ? AND prt.token_id = ? AND prt.participant_type = ?", array($_id, $token_id, ParticipantCore::$DEPARTEMENT) )
			->fetchOne(); 
		return (! $q ? null : $q ); 	
		
	}
	
	public static function processSelection($status=null, $keyword=null, $exclusion=null, $emp_type=null, $type=null, $offset=0, $limit=10 ) 
	{
		$q = Doctrine_Query::create()
				->select("prt.*, prt.name as firstName, prt.father_name as fatherName, prt.grand_father_name as grandFatherName, prt.full_name as fullName, prt.participant_leader_id as leaderID, prt.project_no as projectNo, prt.vat_number as vatNo, prt.status_id as partyStatus, prt.campus_id, campusID, prt.alias as partyAlias, prt.parent_id as parentID, prt.employment_type_id as employmentType, prt.token_id as tokenID, prt.participant_type as typeID, prtcnt.mobile_number as mobileNo, prtcnt.phone_number as phoneNo, prtcnt.pobox as pobox, prtcnt.email as email, prtcnt.website as website, cmps.name as campusName")
				->from("Employee prt") 
				->leftJoin("prt.Participant pt") 
				->leftJoin("prt.participantContacts prtcnt")
				->leftJoin("prt.Campus cmps")
				->offset($offset)
				->limit($limit)
				->where("prt.participant_type = ?", ParticipantCore::$EMPLOYEE);
				if(! is_null($status))
					$q = $q->andWhere("prt.status_id=?", $status);
				if(! is_null($type))
					$q = $q->andWhere("prt.participant_type=?", $type);
				if(! is_null($emp_type))
					$q = $q->andWhere("prt.employment_type_id=?", $emp_type);
				if(!is_null($keyword) )
					$q = $q->andWhere("prt.name LIKE ? AND prt.father_name LIKE ? AND prt.grand_father_name LIKE ? AND prt.project_no LIKE ? AND prt.id_no LIKE ?", array( $keyword, $keyword, $keyword, $keyword, $keyword));
					
				$q = $q->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
    
	public static function processUmbrellaSelection($status=null, $keyword=null, $exclusion=null, $type=null, $offset=0, $limit=10 )
	{
		$q = Doctrine_Query::create()
				->select("prt.*, prt.name as firstName, pt.father_name as fatherName, pt.grand_father_name as grandFatherName, pt.full_name as fullName, prt.participant_leader_id as leaderID, prt.project_no as projectNo, prt.vat_number as vatNo, prt.status_id as partyStatus, prt.campus_id, campusID, prt.alias as partyAlias, prt.parent_id as parentID, prt.token_id as tokenID, prt.participant_type as typeID, prtcnt.mobile_number as mobileNo, prtcnt.phone_number as phoneNo, prtcnt.pobox as pobox, prtcnt.email as email, prtcnt.website as website, cmps.name as campusName, pt.alias as parentAlias")
				->from("Participant prt") 
				->leftJoin("prt.Participant pt") 
				->leftJoin("prt.participantContacts prtcnt")
				->leftJoin("prt.Campus cmps")
				->offset($offset)
				->limit($limit)
				->where("prt.participant_type <> ? AND prt.participant_type <> ? AND prt.participant_type <> ? AND prt.participant_type <> ? ", array(ParticipantCore::$EMPLOYEE, ParticipantCore::$SECTION, ParticipantCore::$COMPANY, ParticipantCore::$OTHER));
				if(! is_null($status))
					$q = $q->andWhere("prt.status_id=?", $status);
				if(! is_null($type))
					$q = $q->andWhere("prt.participant_type=?", $type);
				if(!is_null($keyword) )
					$q = $q->andWhere("prt.name LIKE ? AND prt.project_no LIKE ? AND prt.alias LIKE ?", array( $keyword, $keyword, $keyword));
					
				$q = $q->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
    
	public static function processStatusSelection ()
	{
		$q = Doctrine_Query::create()
			->select("DISTINCT(prt.status_id) AS partyStatus")
			->from("Employee prt") 
			->where("prt.status_id IS NOT NULL")		
			->execute();
		
		$status = array();
		foreach( $q as $w)
			$status[] = $w->partyStatus;
	 
		return ( count ( $status ) <= 0 ? null : $status );
	}

	public static function processTypeSelection()
	{
		$q = Doctrine_Query::create()
			->select("DISTINCT(prt.participant_type) AS partyType")
			->from("Employee prt") 
			->where("prt.participant_type IS NOT NULL")		
			->execute();
		
		$types = array();
		foreach( $q as $w)
			$types[] = $w->partyType;
	 
		return ( count ( $types ) <= 0 ? null : $types );
	}

	
	public static function getInstance()
	{
	return Doctrine_Core::getTable('Employee');
	}
}
