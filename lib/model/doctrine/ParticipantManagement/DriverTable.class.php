<?php

/**
 * DriverTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DriverTable extends PluginDriverTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object DriverTable
     */
	public static function getInstance()
	{
	  return Doctrine_Core::getTable('Driver');
	}
	
	 public static function processCreate ( $employee_id, $license_type, $work_experience, $description )
	{
		//if(!$employee_id)
		// return false;
		$is_duplicated = self::isDuplicated ($employee_id); 
		
		if($is_duplicated)
			return false;
			
			$token = trim($work_experience).trim($license_type).rand('11111', '99999');
			$_nw = new Driver (); //
			$_nw->token_id = md5($token); 
			$_nw->employee_id = $employee_id;
			$_nw->license_type = trim($license_type); 
			$_nw->work_experience = trim($work_experience);  
			$_nw->desctiption = trim($description); 
			$_nw->save(); 
		
		//$_emp = EmployeeTable::getEmployeeObject($employee_id, $emp_token_id );
		//$employment_type = EmployeeTable::$DRIVER;
		//$_emp->changeEmploymentType($employment_type);
			 
		return true; 
	}

	public static function processUpdate($_id, $employee_id, $token_id, $license_type, $work_experience, $description )
	{
		$q = Doctrine_Query::create( )
			->update('Center prt')
			->set('prt.employee_id', '?', $employee_id )
			->set('prt.license_type', '?', trim($license_type)) 
			->set('prt.work_experience', '?', trim($work_experience))  
			->set('prt.description', '?', trim($description))  
			->where('prt.id = ? AND prt.token_id = ?', array($_id, $token_id))
			->execute();	
			
		return ( $q > 0 );   
	}
	
	public static function processSelection( $offset=0, $limit=10, $keyword=null, $type_id=null, $is_assigned=null )
	{
		$q= Doctrine_Query::create()
			->select("dr.*,  prt.name as firstName, prt.full_name as fullName, prt.father_name as fatherName, prt.grand_father_name  as grandFatherName, dr.desctiption as description")
			->from("Driver dr") 
			->innerJoin("dr.Participant prt")
			//->innerJoin("vh.TaskOrder tsko")
			//->innerJoin("vh.Category cat on vh.category_id = cat.id")
			//->innerJoin("tsko.Unit unt on tsko.unit_id = unt.id")
			//->innerJoin("tsko.Currency crr on tsko.currency_id = crr.id") 
			->offset($offset)
			->limit($limit);
			if(!is_null($is_assigned))
			$q = $q->addWhere('dr.is_assigned = ?', $is_assigned);
			
			$q = $q->execute( ); 
			

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function processObject( $_id )
	{
		$q= Doctrine_Query::create()
			->select("dr.*,  prt.name as firstName, prt.father_name as fatherName, prt.grand_father_name  as grandFatherName, dr.is_assigned as isAssigned ")
			->from("Driver dr") 
			->innerJoin("dr.Participant prt")
			//->innerJoin("vh.TaskOrder tsko")
			//->innerJoin("vh.Category cat on vh.category_id = cat.id")
			//->innerJoin("tsko.Unit unt on tsko.unit_id = unt.id")
			//->innerJoin("tsko.Currency crr on tsko.currency_id = crr.id")  
			->where('dr.id = ? ', $_id)
			->fetchOne ( );
			
		return ( ! $q ? null : $q );    
	}
	
	public static function processCandidateEmployeeSelection ($type=null, $status=null, $keyword=null, $offset=0, $limit=10) 
	{
		return EmployeeTable::processSelection ($status, $keyword, $exclusion , $parent, $dept, $type, $offset, $limit ); 
	}
	
	public static function isDuplicated ($_id) 
	{
		$q = Doctrine_Query::create( )
							->select("dr.*")
							->from("Driver dr") 
							->where("dr.id = ?", $_id)
							->fetchOne ( );
							
		return ( count($q) <= 0 ? null : $q); 
	}
}
