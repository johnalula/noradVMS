<?php

/**
 * FleetServiceTaskTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class FleetServiceTaskTable extends PluginFleetServiceTaskTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object FleetServiceTaskTable
     */
     
	public static function getInstance()
	{
		return Doctrine_Core::getTable('FleetServiceTask');
	}
	
	public static function processCreate ( $date, $description, $ref_no, $customer_id, $destination, $no_of_days, $service_type, $service_reason, $_pid, $payment_mode, $departure_date, $departure_time, $depay_payable) 
	{      
       // try{
				if(!$date)
					return false;
					
				if(!$ref_no)
					return false;
					
				$token = trim($date).trim($ref).rand('11111', '99999');
				$_nw = new FleetServiceTask(); 
				$_nw->token_id = md5($token)  ; 
				$_nw->description = $description  ;  
				$_nw->status_id = TaskCore::$ACTIVE; 
				$_nw->reference_no = $ref_no; 
				$_nw->start_date = $date ;   
				$_nw->customer_id = $customer_id ;   
				$_nw->payment_mode_id = $payment_mode ;   
				$_nw->departure_date = $departure_date ;   
				$_nw->departure_time = $departure_time ;   
				$_nw->service_number_of_days = $no_of_days ;   
				$_nw->destination = $destination ;   
				$_nw->is_delay_payable = $depay_payable ;   
				$_nw->service_type_id = $service_type ;   
				$_nw->service_reason = $service_reason ;   
				$_nw->save(); 
				
				//default task attachment			
				$att = new TaskAttachment ();
				$att->token_id = $_nw->token_id;
				$att->task_id = $_nw->id;
				$att->certificate_type = AttachmentCore::$LETTER;
				$att->reference_number = $ref_no;
				$att->save();
				
				//default task participant
				$prt = new TaskParticipant ();
				$prt->token_id = $_nw->token_id;
				$prt->task_id = $_nw->id;
				$prt->participant_id = $_pid;
				$prt->participant_role = ParticipantCore::$DATA_INCODER;
				$prt->description = trim($description);
				$prt->is_default = true;
				$prt->save();
				
				$prt = new TaskParticipant ();
				$prt->token_id = $_nw->token_id;
				$prt->task_id = $_nw->id;
				$prt->participant_id = $customer_id;
				$prt->participant_role = ParticipantCore::$CUSTOMER;
				$prt->description = trim($description);
				$prt->save();
				
            return $_nw; 
       // } catch ( Exception $e) {
        //    return false; 
        //}
	}
	
	public static function processUpdate ($_id, $token_id, $date, $description, $ref )
	{		
		$q = Doctrine_Query::create( )
			->update('FleetServiceTask tsk')
			->set('tsk.start_date', '?', trim($date))  
			//->set('tsk.status_id', '?', TaskCore::$ACTIVE)  
			->set('tsk.description', '?', trim($description))  
			->where('tsk.id = ? AND tsk.token_id = ?', array($_id, $token_id))
			->execute();	

		return ( $q > 0 );   
	}
	
	public static function processDelete ($_id, $token_id)
	{		
		$q = Doctrine_Query::create( )
			->update('FleetServiceTask tsk')
			->set('tsk.start_date', '?', trim($date))  
			//->set('tsk.status_id', '?', TaskCore::$ACTIVE)  
			->set('tsk.description', '?', trim($description))  
			->where('tsk.id = ? AND tsk.token_id = ?', array($_id, $token_id))
			->execute();	

		return ( $q > 0 );   
	}
	
	public static function  processTaskStatusSelection ()  
	{
		$q = Doctrine_Query::create()
			->select("DISTINCT(tsk.status_id) AS taskStatus")
			->from("FleetServiceTask tsk")  	
			->execute();
		
		$status = array();
		foreach( $q as $w)
			$status[] = $w->status_id;
	 
		return ( count ( $status ) <= 0 ? null : $status );
	}
	
	public static function appendQueryFields ( ) 
	{
		$queryFileds = "ftsko.*, tsk.reference_no as referenceNo, tsk.start_date as startDate, (tsk.is_departed=true AND tsk.is_returned=false AND tsk.status_id =".TaskCore::$ONFIELD.") as taskOnField, (tsk.status_id =".TaskCore::$COMPLETED.") as completedTask, ((tsk.is_departed=false AND tsk.is_returned=false AND tsk.status_id =".TaskCore::$ACTIVE.") AND (NOT EXISTS (SELECT ord.id FROM FleetOrder  ord WHERE ord.task_id = tsk.id AND ord.token_id = tsk.token_id ))) as activeTask, ((tsk.is_departed=false AND tsk.is_returned=false AND tsk.status_id =".TaskCore::$ACTIVE.") AND (EXISTS (SELECT orde.id FROM FleetOrder  orde WHERE orde.task_id = tsk.id AND orde.token_id = tsk.token_id ))) as taskOnProccess ,
		
			tsk.destination as fleetDestination, tsk.departure_date as departDate, tsk.departure_time as departTime,tsk.is_departed as isDeparted, tsk.is_returned as isReturned, tsk.status_id as taskStatus, 
			(tsk.is_departed=true AND tsk.is_returned=false) as canReturn, 
			tsk.return_date as returnDate, tsk.return_time as returnTime, tsk.is_delayed as isDelayed, tsk.number_of_delay_days as noOfDelayed, tsk.service_number_of_days as fieldDays, tsk.is_delay_payable as isDelayPayable,
			
			(EXISTS (SELECT ford.id FROM FleetOrder  ford WHERE ford.task_id = tsk.id AND ford.token_id = tsk.token_id )) as hasFleetOrder,
			(NOT EXISTS (SELECT tskfrd.id FROM FleetOrder  tskfrd WHERE tskfrd.task_id = tsk.id AND tskfrd.token_id = tsk.token_id )) as canDelete, 
			
			(EXISTS (SELECT frd.id FROM FleetOrder  frd WHERE frd.task_id = tsk.id AND frd.token_id = tsk.token_id AND frd.is_departed = true AND frd.is_returned = true )) as canContinue,
			
			(tsk.is_departed=true AND tsk.is_returned=false AND tsk.status_id=".TaskCore::$ONFIELD.") as canReturn,
			(tsk.is_departed=false AND tsk.is_returned=false AND tsk.status_id=".TaskCore::$ACTIVE.") as canEditPassenger,
			(tsk.is_departed=true AND tsk.is_returned=false AND tsk.status_id=".TaskCore::$ONFIELD.") as canEditItem,
			(tsk.return_date IS NOT NULL ) as canProceed, 
			
			vh.is_departed as isDeparted, 
			vh.plate_number as plateNo, vh.plate_code as plateCode, vh.plate_code_no as plateCodeNo, vh.vehicle_make as vehicleMake,
			
			ftsko.departure_mileage as departMileage, ftsko.return_mileage as returnMileage, ftsko.number_of_passengers as noOfPassengers, ftsko.fuel_amount as fuelAmount, ps.payment_mode_id as paymentMode, ps.cost_amount as costAmount, tsk.total_cost as totalCost,
			cus.name as firstName, cus.father_name as fatherName, cus.grand_father_name as grandFatherName, cus.name as customerName, cus.alias as customerAlias, cus.project_no as projectNo, prt.full_name as fullName,
			atskor.id as assignmentOrderID,
			
			 
			 ";
		
		return $queryFileds;
	}
	
	public static function processObject ( $_id, $token_id ) 
	{
		$q= Doctrine_Query::create()
			->select(self::appendQueryFields())
			->from("FleetServiceTask tsk")   
			->leftJoin("tsk.fleetTaskOrderTasks ftsko") 
			->leftJoin("ftsko.Vehicle vh")     
			->leftJoin("vh.FuelType ft")    
			->leftJoin("vh.VehicleType vt")   
			->leftJoin("vh.assignmentTaskOrderVehicles atskor on atskor.vehicle_id = vh.id")   
			->leftJoin("atskor.Participant prt")    
			->leftJoin("prt.participantDrivers dr") 
			->leftJoin("tsk.Participant cus ")  
			->leftJoin("tsk.PaymentSetting ps on tsk.payment_mode_id = ps.id")
			->where("tsk.id=? AND tsk.token_id=?", array($_id, $token_id))
			->fetchOne ( );
		return ( ! $q ? null : $q ); 
	}
	
	public static function processSelection($status=null, $keyword=null, $offset=0, $limit=10) 
	{
		//$task_order = "(COUNT(SELECT ord1.id FROM FleetOrder  ord1 WHERE ord1.task_id = tsk.id AND ord1.token_id = tsk.token_id ))";
		$q= Doctrine_Query::create()
			->select(self::appendQueryFields())
			->from("FleetServiceTask tsk")   
			->leftJoin("tsk.fleetTaskOrderTasks ftsko") 
			->leftJoin("ftsko.Vehicle vh")     
			->leftJoin("vh.FuelType ft")    
			->leftJoin("vh.VehicleType vt")   
			->leftJoin("vh.assignmentTaskOrderVehicles atskor on atskor.vehicle_id = vh.id")   
			->leftJoin("atskor.Participant prt")    
			->leftJoin("prt.participantDrivers dr") 
			->leftJoin("tsk.Participant cus ")  
			->leftJoin("tsk.PaymentSetting ps on tsk.payment_mode_id = ps.id")
			->offset($offset)
			->limit($limit)
			->orderBy("tsk.id DESC")
			//->where('tsk.type = ?'. TaskCore::$ASSIGNMENT)
			->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function processTaskParticipantSelection($task_id, $token_id, $keyword=null, $offset=0, $limit=10) 
	{
		$q= Doctrine_Query::create()
			->select("tskprt.*, prt.name as firstName, prt.father_name as fatherName, prt.grand_father_name as grandFatherName,
				vh.plate_code as plateCode, vh.plate_number as plateNo, vh.plate_code_no as plateCodeNo, vh.vehicle_make as vehicleMake, vh.is_assigned as isAssigned, vh.vehicle_color as vehicleColor, (tskprt.vehicle_id IS NOT NULL) as assignedVehicle
			")
			->from("TaskParticipant tskprt") 
			->leftJoin("tskprt.Participant prt")
			->leftJoin("tskprt.Vehicle vh ")
			->offset($offset)
			->limit($limit)
			->where('tskprt.task_id = ? AND tskprt.token_id = ?', array($task_id, $token_id))
			->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function processTaskPassengerSelection($task_id, $token_id, $keyword=null, $order_id=null, $offset=0, $limit=10) 
	{
		$q= Doctrine_Query::create()
			->select("tskprt.*,
				vh.plate_code as plateCode, vh.plate_number as plateNo, vh.plate_code_no as plateCodeNo, vh.vehicle_make as vehicleMake, vh.is_assigned as isAssigned, vh.vehicle_color as vehicleColor, vh.id as assignedVehicle,
				fltord.id as orderID
			")
			->from("TaskPassengers tskprt")  
			->leftJoin("tskprt.FleetOrder fltord ")
			->leftJoin("fltord.Vehicle vh ")
			->offset($offset)
			->limit($limit)
			->where("tskprt.task_id = ? AND tskprt.token_id = ?", array($task_id, $token_id));
			if(!is_null($order_id))
				$q = $q->addWhere("tskprt.fleet_order_id = ?", $order_id);
				
			$q = $q->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function processTaskItemSelection($task_id, $token_id, $keyword=null, $offset=0, $limit=10) 
	{
		$q= Doctrine_Query::create()
			->select("itm.*, itm.item_name as itemName, itm.quantity as itemQuantity,
				vh.plate_code as plateCode, vh.plate_number as plateNo, vh.plate_code_no as plateCodeNo, vh.vehicle_make as vehicleMake, vh.is_assigned as isAssigned, vh.vehicle_color as vehicleColor, vh.id as assignedVehicle,
				fltord.id as orderID
			")
			->from("ItemAcquiredAttachment itm")  
			->leftJoin("itm.FleetOrder fltord ")
			->leftJoin("fltord.Vehicle vh ")
			->offset($offset)
			->limit($limit)
			->where('itm.task_id = ? AND itm.token_id = ?', array($task_id, $token_id))
			->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function processTaskAttachmentSelection ($task_id, $token_id, $keyword=null, $offset=0, $limit=10) 
	{
		$q= Doctrine_Query::create()
			->select("tskatt.*, tskatt.reference_number as referenceNo, tskatt.certificate_type as certificateTypeID, tskatt.num_pages as noOfPages ")
			->from("TaskAttachment tskatt") 
			->offset($offset)
			->limit($limit)
			->where('tskatt.task_id = ? AND tskatt.token_id = ?', array($task_id, $token_id))
			->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function processCandidateVehicleSelection($task_id, $token_id, $is_departed=null, $is_returned=null, $status=null, $keyword=null, $offset=0, $limit=10) 
	{
			$exclusion = array();
			$orders = FleetOrderTable::processSelection ( $task_id, $token_id, true, $is_returned, $status, $keyword, $offset, $limit);
		
			foreach($orders as $order)
			{
				$exclusion[] = $order->vehicle_id;
			}
			
		return VehicleTable::processSelection ( $is_departed, $is_returned,true, $exclusion, $type, $status, $keyword, $offset=0, $limit=10);
	}
	
	public static function processReturnCandidateVehicleSelection($task_id, $token_id, $is_departed=true, $is_returned=false, $status=null, $keyword=null, $offset=0, $limit=10 ) 
	{
			
		return FleetOrderTable::processSelection ($task_id, $token_id, true, false, $status, $keyword, $offset, $limit ); 
	}
	
	public static function processCandidateCustomerSelection( $status=null, $keyword=null, $offset=0, $limit=10) 
	{
		return ParticipantTable::processCustomerSelection ( $status, $keyword, $offset, $limit) ; 
	}
	
	public static function processCreateTaskOrder ($task_id, $token_id, $is_departed=null, $is_returned=null, $status=null, $keyword=null, $offset=0, $limit=10 )
	{
		return FleetOrderTable::processCreate ($task_id, $token_id, $is_departed, $is_returned, $status, $keyword, $offset, $limit );
	}
	
	public static function processTaskOrderSelection ($task_id, $token_id, $is_departed=null, $is_returned=null, $status=null, $keyword=null, $offset=0, $limit=10) 
	{
		return FleetOrderTable::processSelection ( $task_id, $token_id, $is_departed, $is_returned, $status, $keyword, $offset, $limit) ;
	}
	
	public static function processReturnOrderSelection ($task_id, $token_id, $is_departed=null, $is_returned=null, $status=null, $keyword=null, $offset=0, $limit=10) 
	{
		return FleetOrderTable::processSelection ( $task_id, $token_id, true, true, $status, $keyword, $offset, $limit) ;
	}
	
	public static function processPassengerVehicles ( $task_id, $token_id, $is_departed=null, $is_returned=null,$offset=0, $limit=10)  
	{
			$exclusion = array();
			$orders = FleetOrderTable::processSelection ( $task_id, $token_id, true, $is_returned, $status, $keyword, $offset, $limit);
		
			foreach($orders as $order)
			{
				$no_of_passengers = $order->noOfPassengers;
				$order_id = $order->id;
				$passengers = self::processTaskPassengerSelection ($task_id, $token_id, $order_id, $keyword, $offset, 100) ;
				$pass = count($passengers);
				if($pass >= $no_of_passengers )  
					$exclusion[] = $order->id;  
			}
			
		return FleetOrderTable::processCandidateVehicles ( $task_id, $token_id, true, $is_returned, $exclusion, $offset, $limit);
	}
	public static function processCreateTaskAttachment ( $task_id, $token_id, $certificate_type, $ref_no, $num_pages, $folder_stored, $description)
	{
		try {
			//$refer_no = trim($ref_no);
			//if(is_null($refer_no))
				//return false;
				
			$att = new TaskAttachment ();
			$att->task_id = $task_id;
			$att->token_id = $token_id;
			$att->certificate_type = $certificate_type;
			$att->reference_number = trim($ref_no);
			$att->num_pages = trim($num_pages);
			$att->folder_stored = trim($folder_stored);
			$att->description = trim($description);
			$att->save();
			
			return true;
		}
		catch ( Exception $e) 
		{
			return false;
		}
		
	}
	
	public static function processCreateTaskParticipant ( $task_id, $token_id, $participant_id, $participant_role, $description)
	{
		try {
				
			$prt = new TaskParticipant ();
			$prt->task_id = $task_id;
			$prt->token_id = $token_id;
			$prt->participant_id = $participant_id;
			$prt->participant_role = $participant_role;
			$prt->description = trim($description);
			$prt->save();
			 
			return true;
		}
		catch ( Exception $e) 
		{
			return false;
		}
		
	}
	public static function processCreatePassenger ($task_id, $token_id, $full_name, $order_id, $role, $description)
	{
		try {
				
			$prt = new TaskPassengers();
			$prt->task_id = $task_id;
			$prt->token_id = $token_id;
			$prt->full_name = trim($full_name);
			$prt->passenger_role = $role;
			$prt->fleet_order_id = $order_id;
			$prt->description = trim($description);
			$prt->save();
			 
			return true;
		}
		catch ( Exception $e) 
		{
			return false;
		}
		
	}
	
	public static function processCreateItem ($task_id, $token_id, $item_name, $order_id, $quantity, $description)
	{
		//try {
			if(!$quantity)
				$quantity = 1;
				
			$prt = new ItemAcquiredAttachment();
			$prt->task_id = $task_id;
			$prt->token_id = $token_id;
			$prt->item_name = trim($item_name);
			$prt->quantity = $quantity;
			$prt->fleet_order_id = $order_id;
			$prt->description = trim($description);
			$prt->save();
			 
			return true;
		//}
		///catch ( Exception $e) 
		//{
			//return false;
		//}
		
	}
	
	public static function processReturnFleetOrder ($task_id, $token_id, $order_id, $mileage )
	{
		return FleetOrderTable::processReturnFleetOrder ($task_id, $token_id, $order_id, $mileage );
	}
	
	public static function modifyFleetTask ( $task_id, $token_id, $return_date, $return_time )
	{
		$task = self::processObject($task_id, $token_id);
				
		if(!$task)
			return false;
			$date1 = $task->departDate;
			$date2 =  $return_date;
			$no_of_days =  $task->service_number_of_days;
			$date = round(abs(strtotime($date1)-strtotime($date2))/86400);
		
			if( $date > $no_of_days)	
			{		
				$task->number_of_delay_days = $date - $no_of_days;
				$task->is_delayed = true;
			}			
			$task->return_date = $return_date;
			$task->return_time = $return_time;
			$task->save();
		
		return true;	
	}
	
	public static function processDepartureComplete($task_id, $token_id)
	{
		$task = self::processObject($task_id, $token_id);

		if(!$task)
			return false;
			
		$orders = FleetOrderTable::processSelection ( $task_id, $token_id, true, false, $status, $keyword, 0, 10);
			
			foreach($orders as $order)
			{
				$v_id = $order->vehicleID;
				$t_id = $order->vehicleTokenID;
				$vehicle = VehicleTable::processObject($v_id, $t_id );	
				
				$depart_mileage = $order->departMileage;				
				$curr_mileage = $vehicle->current_mileage; 				
				$curr_traveled_km = $vehicle->traveled_km; 
				$traveled_km = 0;
			
				$km = ($depart_mileage-$curr_mileage);
				$traveled_km = $curr_traveled_km+$km; 
				$vehicle->current_mileage = $depart_mileage;	
				$vehicle->traveled_km = $traveled_km;	
				$vehicle->save();
				$vehicle->processDeparture();	 	
			}			
			$task->processDeparture();	
						
		return true;	
	}
    
	public static function processComplete($task_id, $token_id)
	{
		$task = self::processObject($task_id, $token_id);		
		
		if(!$task)
			return false;
			
			$mode = $task->payment_mode_id;
			$cost = $task->costAmount;
			$sum = 0;
			$cost_sum_delay = 0;
			$cost_sum;
			$orders = FleetOrderTable::processSelection ( $task_id, $token_id, true, true, $status, $keyword, 0, 10);
			$per_km = PaymentSettingTable::processValue(PaymentSettingTable::$PER_KM);
			$per_day= PaymentSettingTable::processValue(PaymentSettingTable::$PER_DAY);
			
			foreach($orders as $order)
			{
				$cost_sum = 0;
				$v_id = $order->vehicleID;
				$t_id = $order->vehicleTokenID;
				$vehicle = VehicleTable::processObject($v_id, $t_id );		
				$vehicle = VehicleTable::processObject($v_id, $t_id );			
				$depart_mileage = $order->departMileage;				
				$return_mileage = $order->returnMileage;				
				$curr_mileage = $vehicle->current_mileage; 				
				$curr_traveled_km = $vehicle->traveled_km; 
				$traveled_km = 0;
				 
				$km = ($return_mileage-$curr_mileage);
				$traveled_km = $curr_traveled_km+$km;
				 	
				$vehicle->current_mileage = $return_mileage;	
				$vehicle->traveled_km = $traveled_km;	
				$vehicle->save();
				$vehicle->processReturn();	
				
				switch($mode) {
				case PaymentSettingTable::$PER_KM:
					$cost_km =  $cost * $order->difference_mileage;
					if($task->isDelayPayable )						
						$cost_sum_delay = $per_day*$task->noOfDelayed;
					$cost_sum += ($cost_km+$cost_sum_delay);
				break;
				case PaymentSettingTable::$PER_DAY:
					$cost_sum_day =  $per_day*$task->fieldDays;
					if($task->isDelayPayable )						
						$cost_sum_delay = $per_day*$task->noOfDelayed;
					$cost_sum += ($cost_sum_day+$cost_sum_delay);
				break;
				case PaymentSettingTable::$PER_DAY_AND_KM:	
					$cost_sum_km =  $per_km*$order->difference_mileage;
					$cost_sum_day =  $per_day*$task->fieldDays;
					if($task->isDelayPayable )						
						$cost_sum_delay = $per_day*$task->noOfDelayed;
					$cost_sum += ($cost_sum_km+$cost_sum_day+$cost_sum_delay);
				break;
				case PaymentSettingTable::$OTHER:
					$cost_sum =  $cost; 
				break;
				}
				$order->order_cost = $cost_sum;
				$order->save();
				$sum +=$cost_sum;
				
				
			}
			$task->total_cost = $sum;
			$task->save();
			
			$task->processComplete(); 			
		
		return true;	
	}
    
   
	
}
