<?php

/**
 * PaymentSettingTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PaymentSettingTable extends PluginPaymentSettingTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object PaymentSettingTable
     */
	public static function getInstance()
	{
		return Doctrine_Core::getTable('PaymentSetting');
	}
	
	public static $PER_KM =  1; 
	public static $PER_DAY =  2; 	
	public static $PER_HOUR = 3;  
	public static $PER_DAY_AND_KM = 4;  
	public static $OTHER = 5;  

	public static $ALL_PAYMENT_MODES = array ( 1 => "Per KM", 2 => "Per Day" , 3 => "Per Hour" , 4 => "Per Day and KM", 5 => "Other");
		
	public static function fetchPaymentModeID ( $value ) 
	{
		try {
				foreach( self::$ALL_PAYMENT_MODES as $key => $mode ){
					if( strcmp($mode, $value) == 0 )
					  return $key; 
			}
		
			 return $PER_KM; 
	  } catch ( Exception $e ) {
			return $PER_KM; 
	  }
	}

	public static function fetchPaymentModeValue  (  $id )
	{
		try{
				foreach( self::$ALL_PAYMENT_MODES as $key => $mode ){
				  if( $key == $id )
						return $mode; 
			}
			 return $PER_KM; 
	  } catch ( Exception $e ) {
			 return $PER_KM; 
	  }
	}
	
	public static function fetchExcludedPaymentMode  ( )
	{
		$excluded = array();
		try{
				foreach( self::$ALL_PAYMENT_MODES as $key => $mode ){
				  if( $key != self::$PER_DAY_AND_KM )
				  {
					  $excluded[] = $key;
					 }
						
			}
			 return $excluded; 
			 
	  } catch ( Exception $e ) {
			 return null; 
	  }
	}
	
	public static function fetchDefaultParticipantStatusID() 
	{
		return self::$PER_KM; 
	}
	
	public static function isDuplicated ( $mode ) 
	{
		$q = Doctrine_Query::create( )
							->select("pmt.*")
							->from("PaymentSetting pmt") 
							->where("pmt.payment_mode_id = ?", $mode)
							->fetchOne ( );
							
		return ( count($q) <= 0 ? null : $q); 
	}
	
	public static function processCreate ($cost_amount, $currency_id, $payment_mode, $description, $module, $user_id) 
	{
		try{
				$cost = trim($cost_amount);
				$_duplicated = self::isDuplicated($payment_mode);
				
				if(is_null($cost))
					return false;
					
				if($_duplicated)
					return false;
					
				$token = $cost.$payment_mode.rand('11111', '99999');
				$_nw = new PaymentSetting();
				$_nw->token_id = md5($token);
				$_nw->cost_amount = $cost;
				$_nw->payment_mode_id = $payment_mode;
				$_nw->currency_id = $currency_id;
				$_nw->description = trim($description);
				$_nw->save();
				
				$created_data  = self::fetchPaymentModeValue($_nw->payment_mode_id); 
				
				if($_nw)
				{
					$action_id = SystemLogFileTable::$CREATE;
					$date = date('Y/m/d H:i:s', time());
					$ip =  gethostbyname($_SERVER['HTTP_HOST']) ; 
					$time = date('h:i:s A');
					
					$log = SystemLogFileTable::processCreate($user_id, $module, $action_id, $time, $date, $created_data,  $edited_data, $deleted_data, $viewed_data, $ip );
				}
				
			 return true; 
			 
	  } catch ( Exception $e ) {
			 return false; 
	  }
	}
	
	public static function processUpdate ($_id, $token_id, $cost_amount, $payment_mode, $description , $module, $user_id)
	{
		$q = Doctrine_Query::create( )
			->update('PaymentSetting pmt')
			->set('pmt.cost_amount', '?', $cost_amount )
			->set('pmt.payment_mode_id', '?', $payment_mode) 
			->set('pmt.description', '?', trim($description))  
			->where('pmt.id = ? AND pmt.token_id = ?', array($_id, $token_id))
			->execute();	
			
			$edited_data  = self::fetchPaymentModeValue($payment_mode); 
				
				if($q > 0)
				{
					$action_id = SystemLogFileTable::$UPDATE;
					$date = date('Y/m/d H:i:s', time());
					$ip =  gethostbyname($_SERVER['HTTP_HOST']) ; 
					$time = date('h:i:s A');
					
					$log = SystemLogFileTable::processCreate($user_id, $module, $action_id, $time, $date, $created_data,  $edited_data, $deleted_data, $viewed_data, $ip );
				}
				
		return ( $q > 0 );   
	}
	
	public static function processDelete ($_id, $token_id, $module, $user_id)
	{
		$q = Doctrine_Query::create( )
			->delete ('pmt.*')
			->from ('PaymentSetting pmt')
			->where('pmt.id = ? AND pmt.token_id = ?', array($_id, $token_id))
			->execute ( );	
		
				$obj = self::processObject( $_id, $token_id );
				
				$deleted_data  = self::fetchPaymentModeValue($obj->payment_mode_id); 
				
				if($q	> 0 )
				{
					$action_id = SystemLogFileTable::$DELETE;
					$date = date('Y/m/d H:i:s', time());
					$ip =  gethostbyname($_SERVER['HTTP_HOST']) ; 
					$time = date('h:i:s A');
					
					$log = SystemLogFileTable::processCreate($user_id, $module, $action_id, $time, $date, $created_data,  $edited_data, $deleted_data, $viewed_data, $ip );
				}
				
		return ( $q	> 0  );
	}
	
	public static function processSelection( $offset=0, $limit=10, $payment_mode=null )
	{
		$q = Doctrine_Query::create()
			->select("pmt.*,  pmt.payment_mode_id as paymentModeID, pmt.cost_amount as costValue, crr.name as currencyName, crr.alias as currencyAlias")
			->from("PaymentSetting pmt") 
			->innerJoin("pmt.Currency crr on crr.id = pmt.currency_id") 
			->offset($offset)
			->limit($limit)
			->where('pmt.id IS NOT NULL');
			if(!is_null($payment_mode))
				$q = $q->addWhere('pmt.payment_mode_id = ?', $payment_mode); 
			
			$q = $q->execute( ); 
			

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function processObject( $_id, $_token_id )
	{
		$q = Doctrine_Query::create()
			->select("pmt.*,  pmt.payment_mode_id as paymentModeID, pmt.cost_amount as costValue")
			->from("PaymentSetting pmt") 
			->where('pmt.id = ?  AND pmt.token_id = ?', array($_id, $_token_id))
			->fetchOne ( );
			
		return ( ! $q ? null : $q );    
	}
	
	public static function processValue( $payment_mode_id )
	{
		$q = Doctrine_Query::create()
			->select("pmt.*,  pmt.payment_mode_id as paymentModeID, pmt.cost_amount as costValue")
			->from("PaymentSetting pmt") 
			->where('pmt.payment_mode_id = ?', $payment_mode_id)
			->fetchOne ( );
		
		$cost = $q->cost_amount;
		
		return ( ! $q ? null : $cost );    
	}
	 
}
