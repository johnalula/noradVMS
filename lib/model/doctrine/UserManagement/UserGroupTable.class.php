<?php

/**
 * UserGroupTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserGroupTable extends PluginUserGroupTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object UserGroupTable
     */
	public static $SUPER_USERS = 1;
	public static $MANAGERS = 2;
	public static $REGISTERED = 3;
	public static $GUEST = 4;

	public static $ALL_GROUP_TYPES = array (1 => 'Supper Users', 2 => 'Managers', 3 => 'Registerd Users', 4 => 'Guest');

	
	public static function findGroupTypeID ( $value ) {
	  try {
			foreach( self::$ALL_GROUP_TYPES as $key => $type ){
					  if( strcmp($type, $value) == 0 )
							return $key; 
			}
			return null; 
	  } catch ( Exception $e ) {
			return null; 
	  }
	}
	
	public static function findGroupTypeValue ($_id ){
        try {
            foreach( self::$ALL_GROUP_TYPES as $key => $type ){
                    if( $key == $_id )
                        return $type; 
            }
            return null;       
        } catch ( Exception $e ) {
            return null; 
        }
	}
 
 
	public static function processCreate($_name, $_group_type_id, $_description)
	{
		$token = trim($_name).($_group_type_id).rand('1111111', '9999999');
		$_nw = new UserGroup ();  
		$_nw->token_id = md5($token); 
		$_nw->group_type_id = $_group_type_id;
		$_nw->name = trim($_name);
		$_nw->description = trim($_description); 
		$_nw->save(); 

		return true; 

	}
	public static function processUpdate($_id, $token_id, $_name, $_description)
	{
		$q = Doctrine_Query::create( )
			->update('UserGroup grp') 
			->set('grp.name', '?', trim($_name)) 
			->set('grp.description', '?', trim($_description))  
			->where('grp.id = ? AND grp.token_id = ?', array($_id, $token_id))
			->execute();	
					
		return ( $q > 0 );   

	}
	
	public static function processDelete($_id, $token_id)
   {
		/*$q = Doctrine_Query::create()
			->select("grp.*")
			->from("UserGroup grp")
			->leftJoin("grp.userGroups usr")
			->offset(0)
			->limit(4)
			->where("prt.id = ? ",  $id )
			->execute(); 
		if( count($q) > 0 )
			return false; 		*/	

		$q2 = Doctrine_Query::create()
				->delete("*")
				->from("UserGroup grp")
				->where('grp.id = ? AND grp.token_id = ?', array($_id, $token_id))
				->execute( );
		return ( $q2 > 0  ) ; 
	}
	
	public static function processSelection($keyword=null, $offset=0, $limit=10) 
	{
	$q= Doctrine_Query::create()
		->select("grp.*, grp.name as groupName, grp.group_type_id as groupType, grp.is_active as isActive, grp.is_blocked as isBlocked, grp.ui_theme_color_setting as groupThemeColor, grp.ui_language_setting as groupLanguage, (NOT EXISTS (SELECT grpper.id FROM Permission grpper WHERE grpper.group_id = grp.id)) AS canDeleted")
		->from("UserGroup grp") 
		->innerJoin("grp.userGroups usr on usr.group_id = grp.id")
		//->leftJoin("grp.groupModulePermissions per on per.group_id = grp.id")
		->offset($offset)
		->limit($limit)
		->execute( ); 

	return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function fetchGroups() 
	{
		$q= Doctrine_Query::create()
			->select("grp.*, grp.id as groupID, grp.name as groupName")
			->from("UserGroup grp")  
			->execute( ); 

	return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function getInstance()
	{
	  return Doctrine_Core::getTable('UserGroup');
	}
}
