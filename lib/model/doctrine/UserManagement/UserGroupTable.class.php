<?php

/**
 * UserGroupTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserGroupTable extends PluginUserGroupTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object UserGroupTable
     */
	public static function getInstance()
	{
	  return Doctrine_Core::getTable('UserGroup');
	}

	public static function processCreate($_name, $_description)
	{
		$token = trim($_name).rand('1111111', '9999999');
		$_nw = new UserGroup ();  
		$_nw->token_id = md5($token); 
		$_nw->name = trim($_name);
		$_nw->description = trim($_description); 
		$_nw->save(); 

		return true; 

	}
	public static function processUpdate($_id, $token_id, $_name, $_description)
	{
		$q = Doctrine_Query::create( )
			->update('UserGroup grp') 
			->set('grp.name', '?', trim($_name)) 
			->set('grp.description', '?', trim($_description))  
			->where('grp.id = ? AND grp.token_id = ?', array($_id, $token_id))
			->execute();	
					
		return ( $q > 0 );   

	}
	
	public static function processDelete($_id, $token_id)
   {
		/*$q = Doctrine_Query::create()
			->select("grp.*")
			->from("UserGroup grp")
			->leftJoin("grp.userGroups usr")
			->offset(0)
			->limit(4)
			->where("prt.id = ? ",  $id )
			->execute(); 
		if( count($q) > 0 )
			return false; 		*/	

		$q2 = Doctrine_Query::create()
				->delete("*")
				->from("UserGroup grp")
				->where('grp.id = ? AND grp.token_id = ?', array($_id, $token_id))
				->execute( );
		return ( $q2 > 0  ) ; 
	}
	
	public static function processSelection($keyword=null, $offset=0, $limit=10) 
	{
	$q= Doctrine_Query::create()
		->select("grp.*, usr.username as userName, grp.token_id as tokenID, (NOT EXISTS (SELECT grpper.id FROM Permission grpper WHERE grpper.group_id = grp.id)) AS canDeleted")
		->from("UserGroup grp") 
		->leftJoin("grp.userGroups usr on usr.group_id = grp.id")
		->leftJoin("grp.groupModulePermissions per on per.group_id = grp.id")
		->offset($offset)
		->limit($limit)
		->execute( ); 

	return ( count ( $q ) <= 0 ? null : $q ); 
	}
}
