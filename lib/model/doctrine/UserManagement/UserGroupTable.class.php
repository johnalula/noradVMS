<?php

/**
 * UserGroupTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserGroupTable extends PluginUserGroupTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object UserGroupTable
     */
	public static $SUPER_USERS = 1;
	public static $MANAGERS = 2;
	public static $REGISTERED = 3;
	public static $GUEST = 4;

	public static $ALL_GROUP_TYPES = array (1 => 'Supper Users', 2 => 'Managers', 3 => 'Registerd Users', 4 => 'Guest');

	
	public static function findGroupTypeID ( $value ) {
	  try {
			foreach( self::$ALL_GROUP_TYPES as $key => $type ){
					  if( strcmp($type, $value) == 0 )
							return $key; 
			}
			return null; 
	  } catch ( Exception $e ) {
			return null; 
	  }
	}
	
	public static function findGroupTypeValue ($_id ){
        try {
            foreach( self::$ALL_GROUP_TYPES as $key => $type ){
                    if( $key == $_id )
                        return $type; 
            }
            return null;       
        } catch ( Exception $e ) {
            return null; 
        }
	}
 
 
	public static function processCreate($_name, $_group_type_id, $is_active, $is_blocked, $_description, $language_id, $theme_id, $read_data, $read_length, $create_data, $create_length, $update_data, $update_length, $delete_data, $delete_length)
	{
		$exist = self::checkExistence($_name);
		try {
			
			if($exist)
				return false;
				
			if(is_null($_name) || empty($_name))
				return false;
				
			$token = trim($_name).($_group_type_id).rand('1111111', '9999999');
			$_nw = new UserGroup ();  
			$_nw->token_id = md5($token);  
			$_nw->name = trim($_name);
			$_nw->group_type_id = $_group_type_id;
			$_nw->is_active = $is_active;
			$_nw->is_blocked = $is_blocked;
			$_nw->status = $is_active;
			$_nw->ui_language_setting = $language_id;
			$_nw->ui_theme_color_setting = $theme_id;
			$_nw->description = trim($_description); 
			$_nw->save(); 
			$group_id = $_nw->id;
			$token_id = $_nw->token_id;
			
			if($_nw->group_type_id == self::$SUPER_USERS) {
				$super_admin = PermissionTable::processCreateSuperAdminPermission($group_id, $token_id );
			}
			else {
				$read_flag = PermissionTable::processGroupReadPermission($group_id, $token_id, $read_data, $read_length);
				$create_flag = PermissionTable::processGroupCreatePermission($group_id, $token_id, $create_data, $create_length);
				$delete_flag = PermissionTable::processGroupDeletePermission($group_id, $token_id, $delete_data, $delete_length);
				$update_flag = PermissionTable::processGroupUpdatePermission($group_id, $token_id, $update_data, $update_length);
			}

			return true;  
		} catch ( Exception $e ) {			
			return false; 
		}	 
	}
	public static function processUpdate($_id, $token_id, $_name, $_description)
	{
		$q = Doctrine_Query::create( )
			->update('UserGroup grp') 
			->set('grp.name', '?', trim($_name)) 
			->set('grp.description', '?', trim($_description))  
			->where('grp.id = ? AND grp.token_id = ?', array($_id, $token_id))
			->execute();	
					
		return ( $q > 0 );   

	}
	
	public static function checkExistence($_name)
	{
		$q = Doctrine_Query::create( )
							->select("grp.*")
							->from("UserGroup grp") 
							->where("grp.name LIKE ?", trim($_name))
							->fetchOne ( );
							
		return ( count($q) <= 0 ? null : $q);  

	}
	
	public static function processDelete($_id, $token_id)
   {
		$q = Doctrine_Query::create()
				->delete("*") 
				->from("UserGroup grp") 
				->where('grp.id = ? AND grp.token_id = ? ', array($_id, $token_id))
				->execute( );
				
		return ( count ( $q ) > 0 ? true : false ); 
	}
	
	public static function processSelection($keyword=null, $offset=0, $limit=10) 
	{
	$q= Doctrine_Query::create()
		->select("grp.*, grp.name as groupName, grp.group_type_id as groupType, grp.is_active as isActive, grp.is_blocked as isBlocked, grp.ui_theme_color_setting as groupThemeColor, grp.ui_language_setting as groupLanguage")
		->from("UserGroup grp") 
		//->innerJoin("grp.userGroups usr on usr.group_id = grp.id")
		//->leftJoin("grp.groupModulePermissions per on per.group_id = grp.id")
		->offset($offset)
		->limit($limit)
		->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function fetchGroups() 
	{
		$q= Doctrine_Query::create()
			->select("grp.*, grp.id as groupID, grp.name as groupName")
			->from("UserGroup grp")  
			->execute( ); 

	return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function processCount ( ) 
	{
		$q = Doctrine_Query::create( )
				->select("grp.*")
				->from("UserGroup grp") 
				->execute ( );
							
		return count($q); 
	}
	
	public static function getInstance()
	{
	  return Doctrine_Core::getTable('UserGroup');
	}
}
