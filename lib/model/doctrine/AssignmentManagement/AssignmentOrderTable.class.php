<?php

/**
 * AssignmentOrderTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AssignmentOrderTable extends PluginAssignmentOrderTable
{
    /**
     * Returns an instance of this class.
     *
     * @return object AssignmentOrderTable
     */
     
   public static function processCreate ($task_id, $token_id, $vehicle_id, $driver_id, $description, $date)
   {
		//try{
			//if(is_null($task_id) && is_null($token_id) )
				//return false;
				//$driver = DriverTable
				$_nw = new AssignmentOrder ();  
				$_nw->task_id = $task_id;
				$_nw->token_id = $token_id;   
				$_nw->participant_id = $driver_id;   
				$_nw->vehicle_id = $vehicle_id;   
				$_nw->effective_date = $date;  
				$_nw->description = $description; 
				$_nw->save(); 
				$_nw_id = $_nw->id;
				$token = $_nw->token_id;
				
				$order = self::processObject($_nw_id, $token);
				
				$flag = VehicleTable::processVehicleAssignment( $order ); 
			 
					return true;
			
		//} catch ( Exception $e ) {
        //    return false; 
       // }
	}
   
   public static function processRevertVehicle($task_id, $token_id, $order_id, $vehicle) 
   {
			$order = AssignmentOrderTable::processObject($order_id, $token_id);
			$assigned_id = $order->assignedID;
			$assigned_token = $order->assignedTokenID;
			$vehicle_id = $order->vehicleID;
			$vehicle_token = $order->vehicleTokenID;		
			
			$ex_vehicle = VehicleTable::processObject($vehicle_id, $vehicle_token);
			$ex_vehicle->is_assigned = false;
			$ex_vehicle->vehicle_status = VehicleTable::$NOT_ASSIGNED;
			$ex_vehicle->save();
		
			$assigned = AssignedVehicleTable::processObject($assigned_id, $assigned_token);
			if($assigned) {
				$assigned->vehicle_id = $vehicle;
				$assigned->save();	
			}
			
			$order->vehicle_id = $vehicle;
			$order->save();
			
			$nw_order = AssignmentOrderTable::processObject($order_id, $token_id);
			$nw_vehicle_id = $nw_order->vehicleID;
			$nw_vehicle_token_id = $nw_order->vehicleTokenID;
			 
			
			$nw_vehicle = VehicleTable::processObject($nw_vehicle_id, $nw_vehicle_token_id);
			$nw_vehicle->is_assigned = true;
			$nw_vehicle->vehicle_status = VehicleTable::$ACTIVE;
			$nw_vehicle->save();
			
		return true;
		
	}
   public static function processRevertDriver($task_id, $token_id, $order_id, $driver) 
   {
			$order = AssignmentOrderTable::processObject($order_id, $token_id);
			$assigned_id = $order->assignedID;
			$assigned_token = $order->assignedTokenID;
			$driver_id = $order->driverID;
			$driver_token = $order->driverTokenID;		
			
			$ex_driver = DriverTable::processObject($driver_id, $driver_token);
			if($ex_driver) {
				$ex_driver->is_assigned = false; 
				$ex_driver->save();
			}
		
			$assigned = AssignedVehicleTable::processObject($assigned_id, $assigned_token);
			if($assigned) {
				$assigned->participant_id = $driver;
				$assigned->save();	
			}
			
			if($order) {
				$order->participant_id = $driver;
				$order->save();
			}
			
			$nw_order = AssignmentOrderTable::processObject($order_id, $token_id);
			if($nw_order) {
				$nw_driver_id = $nw_order->driverID;
				$nw_driver_token_id = $nw_order->driverTokenID;
			}
			
			$nw_driver = DriverTable::processObject($nw_driver_id, $nw_driver_token_id);
			if($nw_driver) {
				$nw_driver->is_assigned = true;
				$nw_driver->save();
			}
			
		return true;
		
	}
   
   public static function processObject($_id, $token_id ) 
	{
		$q= Doctrine_Query::create()
			->select("tsko.*,  prt.name as firstName, prt.father_name as fatherName, prt.grand_father_name  as grandFatherName, prt.id as empID, vh.plate_number as plateNo, vh.plate_code as plateCode, vh.plate_code_no as plateCodeNo,vh.id as vehicleID, vh.token_id as vehicleTokenID, dr.id as driverID, dr.token_id as driverTokenID, vh.is_departed as isDeparted, vh.is_returned as isReturned,
			 prt.full_name as fullName,
			vh.id as vehicleID, vh.token_id as vehicleTokenID, dr.id as driverID, dr.token_id as driverTokenID
			
			")
			->from("AssignmentOrder tsko")  
			->innerJoin("tsko.Task tsk") 
			->innerJoin("tsko.Vehicle vh") 
			->leftJoin("tsko.Participant prt")
			->leftJoin("prt.participantDrivers dr") 
			->where('tsko.id = ? AND tsko.token_id = ?', array($_id, $token_id))
			->fetchOne ( );
			
		return ( ! $q ? null : $q ); 
	}
	
	public static function processSelection ( $task_id, $token_id, $status=null, $keyword=null, $offset=0, $limit=10) 
	{
		$q= Doctrine_Query::create()
			->select("tsko.*,  prt.name as firstName, prt.father_name as fatherName, prt.grand_father_name  as grandFatherName, prt.id as empID, vh.plate_number as plateNo, vh.plate_code as plateCode, vh.plate_code_no as plateCodeNo,vh.id as vehicleID, vh.token_id as vehicleTokenID, dr.id as driverID, dr.token_id as driverTokenID, vh.is_departed as isDeparted, vh.is_returned as isReturned,
			 prt.full_name as fullName,
			vh.id as vehicleID, vh.token_id as vehicleTokenID, dr.id as driverID, dr.token_id as driverTokenID
			
			")
			->from("AssignmentOrder tsko")  
			->innerJoin("tsko.Task tsk") 
			->innerJoin("tsko.Vehicle vh") 
			->leftJoin("tsko.Participant prt")
			->leftJoin("prt.participantDrivers dr") 
			->offset($offset)
			->limit($limit)
			->where('tsko.task_id = ? AND tsko.token_id = ?', array($task_id, $token_id))
			->execute( ); 

		return ( count ( $q ) <= 0 ? null : $q ); 
	}
	
	public static function getInstance()
	{
		return Doctrine_Core::getTable('AssignmentOrder');
	}
}
